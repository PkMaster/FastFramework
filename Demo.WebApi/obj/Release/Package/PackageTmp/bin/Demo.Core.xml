<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Demo.Core</name>
    </assembly>
    <members>
        <member name="T:Demo.Core.ApiModels.ApiResult">
            <summary>
            webapi响应参数类
            </summary>
        </member>
        <member name="P:Demo.Core.ApiModels.ApiResult.Code">
            <summary>
            httpstatus 状态码
            </summary>
        </member>
        <member name="P:Demo.Core.ApiModels.ApiResult.Message">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="P:Demo.Core.ApiModels.ApiResult.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:Demo.Core.ApiModels.PageResult`1">
            <summary>
            分页返回结果类
            </summary>
            <typeparam name="T">查询返回数据类型</typeparam>
        </member>
        <member name="P:Demo.Core.ApiModels.PageResult`1.Total">
            <summary>
            数据总条数
            </summary>
        </member>
        <member name="P:Demo.Core.ApiModels.PageResult`1.Rows">
            <summary>
            查询返回数据
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.Account">
            <summary>
            账号名称
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.Password">
            <summary>
            账号密码
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.MobilePhone">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.DoctorName">
            <summary>
            医生名称
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.DoctorShortName">
            <summary>
            医生简称
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.CreateBy">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.UpdateBy">
            <summary>
            修改人
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.UpdateDate">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.DoctorLevel">
            <summary>
            医生等级
            </summary>
        </member>
        <member name="P:Demo.Core.AppServices.DoctorInfo.DoctorStar">
            <summary>
            医生星标
            </summary>
        </member>
        <member name="M:Demo.Core.AppServices.IDoctorInfoRepository.GetDoctorInfoById(System.Int32)">
            <summary>
            根据医生id获取医生信息
            </summary>
            <param name="id">医生id</param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Extensions.AutoMapperExtension">
            <summary>
            automapper扩展类
            </summary>
        </member>
        <member name="M:Demo.Core.Extensions.AutoMapperExtension.MapTo``2(``1)">
            <summary>
             类型映射,默认字段名字一一对应
            </summary>
            <typeparam name="TDestination">转化之后的model，可以理解为viewmodel</typeparam>
            <typeparam name="TSource">要被转化的实体，Entity</typeparam>
            <param name="source">可以使用这个扩展方法的类型，任何引用类型</param>
            <returns>转化之后的实体</returns>
        </member>
        <member name="T:Demo.Core.Extensions.ValueExtension">
            <summary>
            值类型扩展方法
            </summary>
        </member>
        <member name="M:Demo.Core.Extensions.ValueExtension.IsNullOrEmpty(System.String)">
            <summary>
             指示指定的字符串是null还是空字符串("")
            </summary>
            <param name="value">要测试的字符串</param>
            <returns>如果value参数为null或空字符串(""),则为 true;否则为 false</returns>
        </member>
        <member name="M:Demo.Core.Extensions.ValueExtension.IsInt(System.String)">
            <summary>
            将数字的字符串表示形式转换为它的等效32位有符号整数,一个指示转换是否成功的返回值
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>如果成功转换了value,则为true;否则为false</returns>
        </member>
        <member name="M:Demo.Core.Extensions.ValueExtension.ToInt32(System.String)">
            <summary>
            将数字的字符串表示形式转换为它的等效32位有符号整数
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>与value中包含的数字等效的32位有符号整数</returns>
        </member>
        <member name="M:Demo.Core.Extensions.ValueExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            判断两个字符串是否相等,忽略大小写
            </summary>
            <param name="source">要比较的第一个字符串,或null。</param>
            <param name="value">要比较的第二个字符串,或null。</param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.IRepository`1">
            <summary>
            Dapper仓储类接口
            </summary>
            <typeparam name="TEntity">仓储实体</typeparam>
        </member>
        <member name="M:Demo.Core.IRepository`1.Get(System.Object)">
            <summary>
            根据表主键获取数据
            </summary>
            <param name="key">表主键</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAll">
            <summary>
            获取表所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Insert(`0)">
            <summary>
            插入一条数据
            </summary>
            <param name="entityToInsert">待插入表实体类</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entityToUpdate">待更新表实体类</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Delete(`0)">
            <summary>
            删除一条数据
            </summary>
            <param name="entityToUpdate">待删除表实体类</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Get(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAsync(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="TEntity">仓储实体</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAsync``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">主键值</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAll(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAllAsync(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAll``1(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.GetAllAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Insert(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增实体数据
            </summary>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.InsertAsync(`0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            新增实体数据
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.InsertAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            新增实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToInsert">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>成功插入条数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Update(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.UpdateAsync(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.UpdateAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            修改实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToUpdate">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Delete(`0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <param name="entityToDelete">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToDelete">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.DeleteAsync``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除实体数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entityToDelete">实体对象</param>
            <param name="traction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Execute(System.String,System.Object)">
            <summary>
            执行sql语句,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.ExecuteAsync(System.String,System.Object)">
            <summary>
            执行sql语句,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Execute(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql命令,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.ExecuteAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行sql命令,用于增删改查
            </summary>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回执行sql后受影响的行数</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Query(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <typeparam name="TEntity">返回数据的类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.QueryAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <typeparam name="TEntity">返回数据的类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Query``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <typeparam name="T">返回数据的类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.QueryAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据,返回指定数据类型
            </summary>
            <typeparam name="T">返回数据的类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="buffered">是否缓冲</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回指定数据类型的数据序列</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.QueryFirst``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果则抛出异常
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.QueryFirstAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果则抛出异常
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.QueryFirstOrDefault``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果返回默认值
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.QueryFirstOrDefaultAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行查询并将第一个结果映射到指定类型对象,无结果返回默认值
            </summary>
            <typeparam name="T">指定类型对象</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">sql参数对象</param>
            <param name="transaction">此次操作的事务对象</param>
            <param name="commandTimeout">执行的超时时间</param>
            <param name="commandType">指定如何解释命令字符串</param>
            <returns>返回查询结果集的第一个结果</returns>
        </member>
        <member name="M:Demo.Core.IRepository`1.Dispose">
            <summary>
            释放对象方法
            </summary>
        </member>
        <member name="M:Demo.Core.Log4net.LogManager.InitLog4Net(System.String)">
            <summary>
            初始化log4net
            </summary>
            <param name="logConfigPath">log4net配置文件存放地址</param>
        </member>
        <member name="M:Demo.Core.Log4net.LogManager.WriteInfo(System.String)">
            <summary>
            记录系统信息
            </summary>
            <param name="message">记录信息</param>
        </member>
        <member name="M:Demo.Core.Log4net.LogManager.WriteError(System.String,System.Exception)">
            <summary>
            记录系统错误信息
            </summary>
            <param name="message">错误信息描述</param>
            <param name="ex">若传入错误信息对象,将记录错误信息的详细内容</param>
        </member>
        <member name="T:Demo.Core.Utils.ConfigManager">
            <summary>
            web.config配置获取帮助类
            </summary>
        </member>
        <member name="M:Demo.Core.Utils.ConfigManager.GetAppSettingString(System.String)">
            <summary>
            得到AppSettings中的配置字符串信息
            </summary>
            <param name="key">AppSettings节点add的name值</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Utils.ConfigManager.GetConnectionString(System.String)">
            <summary>
            得到ConnectionStrings中的配置字符串信息
            </summary>
            <param name="key">ConnectionString节点add的name值</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Utils.HttpManager.Post(System.String)">
            <summary>
            指定Post地址使用Get 方式获取全部字符串
            </summary>
            <param name="url">请求后台地址</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Utils.HttpManager.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            指定Post地址使用Get 方式获取全部字符串
            </summary>
            <param name="url">请求后台地址</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Utils.HttpManager.Post(System.String,System.String)">
            <summary>
            指定Post地址使用Get 方式获取全部字符串
            </summary>
            <param name="url">请求后台地址</param>
            <param name="content">Post提交数据内容(utf-8编码的)</param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Utils.JsonManager">
            <summary>
            json相关帮助类
            </summary>
        </member>
        <member name="M:Demo.Core.Utils.JsonManager.Serialize(System.Object)">
            <summary>
            将传入对象序列化成json字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Utils.JsonManager.Deserialize``1(System.String)">
            <summary>
            将传入json字符串反序列化成指定对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
    </members>
</doc>
